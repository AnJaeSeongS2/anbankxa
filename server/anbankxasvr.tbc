#include <stdio.h>
#include <ctype.h>
#include <usrinc/atmi.h>
#include <usrinc/sdl.h>
#include "../sdl/anbankxa.s"
#include "../usrlib/timetostr.c"

#define OKMSG "YOU COMPLETE THE TRANSACTION"
#define USERPASS "tibero/tmax"
#define NAMEMAXLEN    10
const char *const BANK_ID[2] = {"anbank1","anbank2"};
EXEC SQL include sqlca.h;
EXEC SQL BEGIN DECLARE SECTION;
    char    bank_id[NAMEMAXLEN];
    long     account_id;
    long     money;
EXEC SQL END DECLARE SECTION;


//function for SERVICE of XA 'anbankxasvr'
void ATMSERVICE(TPSVCINFO *msg);

//function for sql query
int CREATE(const long input_account_id, char *const input_bank_id, const long input_money);
int DEPOSIT(const long input_account_id, char *const input_bank_id, const long input_money);
int WITHDRAW(const long input_account_id, char *const input_bank_id, const long input_money);
int SENDMONEY(const long input_account_id1, char *const input_bank_id1, const long input_money, const long input_account_id2 , const *const input_bank_id2 );


void ATMSERVICE(TPSVCINFO *msg)
{
    struct input_bank2 *rcvbuf;
    int     ret;
    char    *send;
	
	printTime(); //현재시간 출력
    tx_begin();
    rcvbuf = (struct input_bank2 *)(msg->data);
    send = (char *)tpalloc("STRING", NULL, 0);
    if (send == NULL) {
        fprintf(stderr, "tpalloc fail errno = %s\n", tpstrerror(tperrno));
        tpreturn(TPFAIL, 0, (char *)NULL, 0, TPNOFLAGS);
    }
    

	int n = 0;
    printf("selecting command in ATMSERVICE\n");
    if(!strcmp(rcvbuf->commandstr, "DEPOSIT"))
	{
	    n = DEPOSIT(rcvbuf->account_id2,rcvbuf->bank_id2,rcvbuf->money);
		printf("ended DEPOSIT function\n");
	}
	
    if(!strcmp(rcvbuf->commandstr, "CREATE"))
	{
	    n = CREATE(rcvbuf->account_id1 , rcvbuf->bank_id1, rcvbuf->money);
		printf("ended CREATE function\n");
	}
	
    if(!strcmp(rcvbuf->commandstr, "WITHDRAW"))
	{
	    n = WITHDRAW(rcvbuf->account_id1 , rcvbuf->bank_id1, rcvbuf->money);
		printf("ended WITHDRAW function\n");
	}
	
    if(!strcmp(rcvbuf->commandstr, "SENDMONEY"))
	{
	    n = SENDMONEY(rcvbuf->account_id1 , rcvbuf->bank_id1 , rcvbuf->money , rcvbuf->account_id2, rcvbuf->bank_id2);
		printf("ended SENDMONEY function\n");
	}
	

	//function is not activated correctly.
	if( n == 0)
	{
		printf("%s Function Fail\n \n",rcvbuf->commandstr);
		tx_rollback();
		tpreturn(TPFAIL, 0, (char *)NULL, 0, TPNOFLAGS);
	}

	//function is activated correctly.
    strcpy(send, OKMSG);
    tx_commit();
	printf("acctivated tx_commit()\n \n");
    tpreturn(TPSUCCESS, 1, (char *)send, strlen(send), TPNOFLAGS);


}

int CREATE(const long input_account_id, char *const input_bank_id, const long input_money)
{
    account_id = input_account_id;
    money= input_money;
	strcpy(bank_id,input_bank_id);
	
	printf("******CREATING.....******\naccount_id : %d\nmoney : %d\nbank_id : %s\n********************", account_id, money, bank_id);
    EXEC SQL XA SET CONNECTION AT :bank_id;
    EXEC SQL INSERT INTO ACCOUNT (
    ACCOUNT_ID, 
    MONEY )
    VALUES (
    :account_id, :money);

    if ( sqlca.sqlcode != 0 )
    {
        printf("CREATE(INSERT) failed sqlcode = %d\n", sqlca.sqlcode);
		return 0;
	}

	return 1;

}

int SENDMONEY(const long input_account_id1, char *const input_bank_id1 , const long input_money, const long input_account_id2 , const *const input_bank_id2 )
{
	if(WITHDRAW(input_account_id1,input_bank_id1,input_money) == 1 && DEPOSIT(input_account_id2,input_bank_id2,input_money) == 1)
	{
		return 1;
	}
	else
	{
	    printf("fail SENDMONEY\n");
		return 0;
	}
}





int DEPOSIT(const long input_account_id , char *const input_bank_id, const long input_money)
{
    account_id = input_account_id;
	strcpy(bank_id , input_bank_id);
	EXEC SQL XA SET CONNECTION AT :bank_id;
    EXEC SQL SELECT MONEY INTO :money FROM ACCOUNT WHERE ACCOUNT_ID = :account_id;
	//FETCH로 가져오는 것은 DB를 수정하는 것이 아니므로, XA임에도 즉시 :money가 즉시 initialize된다.

    long prevmoney = money;
    money = money + input_money;
    EXEC SQL UPDATE ACCOUNT
             SET MONEY = :money
             WHERE ACCOUNT_ID = :account_id;


    printf("*********DEPOSITING....********\naccount_id = %d\nbank_id = %s\nmoney = %d\n****************\n",account_id,bank_id,money);
    if ((sqlca.sqlcode != 0 && sqlca.sqlcode != 1403) )
    {
        printf("DEPOSIT(UPDATE) failed sqlcode = %d\n", sqlca.sqlcode);
        return 0;
	}
	if (sqlca.sqlcode == 1403)
	{
		printf("DEPOSIT(UPDATE) failed at SELECT QUERY. sqlcode = %d\n", sqlca.sqlcode);
		return 0;
	}
    if (prevmoney>money)
    {
        printf("money high limit over prevmoney < currentmoney\n");
        printf("DEPOSIT(UPDATE) failed sqlcode = %d\n", sqlca.sqlcode);
		return 0;
    }
    if (money<0)
    {
        printf("money high limit over money < 0");
        printf("deposit(UPDATE) failed sqlcode = %d\n", sqlca.sqlcode);
		return 0;
    }
	return 1;
}

int WITHDRAW(const long input_account_id , char *const input_bank_id, const long input_money)
{
    account_id= input_account_id;
	strcpy( bank_id , input_bank_id);

    EXEC SQL XA SET CONNECTION AT :bank_id;
    EXEC SQL SELECT MONEY INTO :money FROM ACCOUNT WHERE ACCOUNT_ID = :account_id;

    long prevmoney = money;
    money= money - input_money;
    EXEC SQL UPDATE ACCOUNT 
             SET MONEY = :money
             WHERE ACCOUNT_ID = :account_id;

    printf("*******WITHDRAWING...*********\naccount_id = %d\nbank_id = %s\nmoney = %d\n*********************\n",account_id,bank_id,money);
    if ((sqlca.sqlcode != 0 && sqlca.sqlcode != 1403) )
    {
        printf("WITHDRAW(UPDATE) failed sqlcode = %d\n", sqlca.sqlcode);
        return 0;
	}
	if (sqlca.sqlcode == 1403)
	{
		printf("WITHDRAW(UPDATE) failed at SELECT QUERY. sqlcode = %d\n", sqlca.sqlcode);
		return 0;
	}
    if (prevmoney<money)
    {
        printf("money min limit over prevmoney < currentmoney\n");
        printf("WITHDRAW(UPDATE) failed sqlcode = %d\n", sqlca.sqlcode);
		return 0;
    }
    if (money<0)
    {
        printf("money min limit over money < 0");
        printf("WITHDRAW(UPDATE) failed sqlcode = %d\n", sqlca.sqlcode);
	    return 0;	
    }
	return 1;
}


