#include <stdio.h>
#include <ctype.h>
#include <usrinc/atmi.h>
#include <usrinc/sdl.h>
#include "../sdl/anbankxa.s"
#define OKMSG "YOU COMPLETE THE TRANSACTION"
#define USERPASS "tibero/tmax"
#define NAMEMAXLEN    10
const char *const BANK_ID[2] = {"anbank1","anbank2"};
EXEC SQL include sqlca.h;
EXEC SQL BEGIN DECLARE SECTION;
    char    bank_id1[NAMEMAXLEN];
    int     account_id1;
    char    bank_id2[NAMEMAXLEN];
    int     account_id2;
    long     money;
EXEC SQL END DECLARE SECTION;


int ATMSERVICE(TPSVCINFO *msg)
{
    struct input_bank2 *rcvbuf;
    int     ret;
    char    *send;

	
    tx_begin();
    rcvbuf = (struct input_bank2 *)(msg->data);
    send = (char *)tpalloc("STRING", NULL, 0);
    if (send == NULL) {
        fprintf(stderr, "tpalloc fail errno = %s\n", tpstrerror(tperrno));
        tpreturn(TPFAIL, 0, (char *)NULL, 0, TPNOFLAGS);
    }
    

	int n = 0;
    printf("selecting command in ATMSERVICE\n");
    if(!strcmp(rcvbuf->commandstr, "DEPOSIT"))
	{
	    n = DEPOSIT(msg);
		printf("ended DEPOSIT(msg) function\n");
	}
	
    if(!strcmp(rcvbuf->commandstr, "CREATE"))
	{
	    n = CREATE(msg);
		printf("ended CREATE(msg) function\n");
	}
	
    if(!strcmp(rcvbuf->commandstr, "WITHDROW"))
	{
	    n = WITHDROW(msg);
		printf("ended WITHDROW(msg) function\n");
	}
	
    if(!strcmp(rcvbuf->commandstr, "SENDMONEY"))
	{
	    n = SENDMONEY(msg);
		printf("ended SENDMONEY(msg) function\n");
	}
	

	//function is not activated correctly.
	if( n == 0)
	{
		tx_rollback();
		tpreturn(TPFAIL, 0, (char *)NULL, 0, TPNOFLAGS);
	}
    strcpy(send, OKMSG);


	//function is activated correctly.
    tx_commit();
	printf("acctivated tx_commit()\n");
    tpreturn(TPSUCCESS, 1, (char *)send, strlen(send), TPNOFLAGS);


}

int CREATE(TPSVCINFO *msg)
{
    struct input_bank2 *rcvbuf;
    int     ret;
    char    *send;

    rcvbuf = (struct input_bank2 *)(msg->data);
    send = (char *)tpalloc("STRING", NULL, 0);
    if (send == NULL) {
        fprintf(stderr, "tpalloc fail errno = %s\n", tpstrerror(tperrno));
		tx_rollback();
        tpreturn(TPFAIL, 0, (char *)NULL, 0, TPNOFLAGS);
    }

    account_id1 = rcvbuf->account_id1;
    money= rcvbuf->money;
	strcpy(bank_id1,rcvbuf->bank_id1);
	
	printf("******CREATING.....******\naccount_id1 : %d\nmoney : %d\nbank_id : %s\n********************", account_id1, money, bank_id1);
    EXEC SQL XA SET CONNECTION AT :bank_id1;
    if ( sqlca.sqlcode != 0)
    {
	     printf( " Insert Fail");
	     printf("[%s] %d \n", rcvbuf, sqlca.sqlcode);
	     tpreturn( TPFAIL, sqlca.sqlcode, rcvbuf, strlen(rcvbuf), 0 );
	}



  	/*  Declare && Open Cursor for Fetch */
    EXEC SQL INSERT INTO ACCOUNT (
    ACCOUNT_ID, 
    MONEY )
    VALUES (
    :account_id1, :money);

    if ( sqlca.sqlcode != 0 )
    {
	     printf(" Insert Fail");
	     printf("[%s] %d \n", rcvbuf, sqlca.sqlcode);
	     tpreturn( TPFAIL, sqlca.sqlcode, rcvbuf, strlen(rcvbuf), 0 );
	}

    if (sqlca.sqlcode != 0 && sqlca.sqlcode != 1403 )
    {
        printf("CREATE(INSERT) failed sqlcode = %d\n", sqlca.sqlcode);
		tx_rollback();
		tpreturn(TPFAIL, 0, (char *)NULL, 0, TPNOFLAGS);
    }

    strcpy(send, OKMSG);
	printf("CREATE function end\n");
	return 1;

}

int SENDMONEY(TPSVCINFO *msg)
{
    struct input_bank2 *rcvbuf;
    int     ret;
    char    *send;

    tx_begin();
    rcvbuf = (struct input_bank2 *)(msg->data);
    send = (char *)tpalloc("STRING", NULL, 0);
    if (send == NULL) {
        fprintf(stderr, "tpalloc fail errno = %s\n", tpstrerror(tperrno));
        tpreturn(TPFAIL, 0, (char *)NULL, 0, TPNOFLAGS);
    }


	if(WITHDROW(msg) == 1 && DEPOSIT(msg) == 1)
	{
		strcpy(send, OKMSG);
		return 1;
	}
	else
	{
	    printf("fail SENDMONEY\n");
		return 0;
	}


}





int DEPOSIT(TPSVCINFO *msg)
{
    struct input_bank2 *rcvbuf;
    int     ret;
    long    acnt_id;
    char    *send;

    rcvbuf = (struct input_bank2 *)(msg->data);
    send = (char *)tpalloc("STRING", NULL, 0);
    if (send == NULL) {
        fprintf(stderr, "tpalloc fail errno = %s\n", tpstrerror(tperrno));
        return 0;
	}


    account_id2 = rcvbuf->account_id2;
	strcpy(bank_id2 , rcvbuf->bank_id2);
	EXEC SQL XA SET CONNECTION AT :bank_id2;
    EXEC SQL SELECT MONEY INTO :money FROM ACCOUNT WHERE ACCOUNT_ID = :account_id2;
    /*  Declare && Open Cursor for Fetch */
    long prevmoney = money;
    money = money + rcvbuf->money;
    EXEC SQL UPDATE ACCOUNT
             SET MONEY = :money
             WHERE ACCOUNT_ID = :account_id2;


    printf("*********DEPOSITING....********\naccount_id = %d\nbank_id = %s\nmoney = %d\n****************\n",account_id2,bank_id2,money);
    if ((sqlca.sqlcode != 0 && sqlca.sqlcode != 1403) )
    {
        printf("DEPOSIT(UPDATE) failed sqlcode = %d\n", sqlca.sqlcode);
		tx_rollback();
        return 0;
	}
    if (prevmoney>money)
    {
        printf("money high limit over prevmoney<money");
        printf("DEPOSIT(UPDATE) failed sqlcode = %d\n", sqlca.sqlcode);
		tx_rollback();
		return 0;
    }
    if (money<0)
    {
        printf("money high limit over money<0");
        printf("deposit(UPDATE) failed sqlcode = %d\n", sqlca.sqlcode);
		tx_rollback();
        //tpreturn(TPFAIL, 0, (char *)NULL, 0, TPNOFLAGS);
		return 0;
    }
    strcpy(send, OKMSG);
    //tpreturn(TPSUCCESS, 1, (char *)send, strlen(send), TPNOFLAGS);
	return 1;
}

int WITHDROW(TPSVCINFO *msg)
{
    struct input_bank2 *rcvbuf;
    int     ret;
    long    acnt_id;
    char    *send;
    
    rcvbuf = (struct input_bank2 *)(msg->data);
    send = (char *)tpalloc("STRING", NULL, 0);
    if (send == NULL) {
        fprintf(stderr, "tpalloc fail errno = %s\n", tpstrerror(tperrno));
		tx_rollback();
		return 0;
    }


    account_id1= rcvbuf->account_id1;
	strcpy( bank_id1 , rcvbuf->bank_id1);

    EXEC SQL XA SET CONNECTION AT :bank_id1;
    EXEC SQL SELECT MONEY INTO :money FROM ACCOUNT WHERE ACCOUNT_ID = :account_id1;
    /*  Declare && Open Cursor for Fetch */
    long prevmoney = money;
    money= money - rcvbuf->money;
    EXEC SQL UPDATE ACCOUNT 
             SET MONEY = :money
             WHERE ACCOUNT_ID = :account_id1;

    printf("*******WITHDROWING...*********\naccount_id = %d\nbank_id = %s\nmoney = %d\n*********************\n",account_id1,money);
    if (sqlca.sqlcode != 0 && sqlca.sqlcode != 1403 )
    {
        printf("WITHDROW(UPDATE) failed sqlcode = %d\n", sqlca.sqlcode);
        tx_rollback();
		return 0;

    }

    if (prevmoney<money)
    {
        printf("money min limit over prevmoney<money");
        printf("WITHDROW(UPDATE) failed sqlcode = %d\n", sqlca.sqlcode);
        tx_rollback();
		return 0;
    }
    if (money<0)
    {
        printf("money min limit over money<0");
        printf("WITHDROW(UPDATE) failed sqlcode = %d\n", sqlca.sqlcode);
        tx_rollback();
	    return 0;	
    }

    strcpy(send, OKMSG);
	return 1;
}


