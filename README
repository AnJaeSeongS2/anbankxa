https://github.com/AnJaeSeongS2/anbankxa
****** RM XA files original pass info *******
usage : 
0. cd bank20170720
1. make clean all
2. cd client
3. ./anbankxacli




*folder name  
anbankxa  = bank20170720

*file name
rc-7-fix3 = $OH/rc-7-fix3
svct/anbankxasvr_svctab*  = $TMAXDIR/svct/anbankxasvr_svctab*
server/anbankxasvr  = $TMAXDIR/appbin/anbankxasvr

*** 컴파일에 필요한 command 순서대로 정리


B. XA 컴파일 총 과정
*** XA할때 참고해야할 매뉴얼은 Multiple RM관련임 (Tmax Programming Guide(MultipleRM))

*** XA할때 매뉴얼에 내용이 빠져있는거 많으니까 조심하길.

*** XA를 사용하는 구조를 상세설명
 XA에서 client측 소스코드에서는 트랜잭션에 대해 관여하는걸 최소로 해야함. tp_alloc과 tpcall, tpfree, tpend같이 XA와 무관한 트랜잭션 관리 함수만 사용하게 됨. client측의 tpcall을 통해 server측에 있는 서비스를 불러오게 된다. 
 맨 먼저 불러오는 서비스는 anbankxasvr를 기준으로 ATMSERVICE라는 서비스다. 이 서비스는 CREATE,DEPOSIT,WITHDRAW,SENDMONEY의 4가지 서비스를 선택해주는 서비스이다. 따라서 ATMSERVICE에서는 tx_begin()과 CREATE등등의 함수 사용부분, 상황에 따른 tx_rollback(), tx_commit(), 그리고 마지막으로 tpreturn()이 작성되어있다.
 세부적인 4가지 서비스들은 각각 EXEC SQL XA SET CONNECTION AT : conn_id로 DB에 접근하고, 이 conn_id는 anbankxa.m내에 작성해놓은 xa로 묶인 svrgroup 의 id값이다. 본인의 코드내에서는 이 값이 anbank1,anbank2이다. 이후 각 서비스는 상황에 따른 tx_rollback(), 상황에 따른 return (1/0) 으로 ATMSERVICE에서 함수가 잘 수행됐는 지 확인하게 해준다.


0. RM을 통한 XA를 진행하기 위해서는 TMS가 만들어져야한다. 본인은 이름이 tms_tbr인  TMS를 만들었다.
anbankxa.m에서 svrgroup에 tms_tbr을 엮어줘야한다. ex) 본인 anbankxa.m내의 svg_anbank1 절의 TMSNAME = "tms_tbr"
이 tms_tbr은 본인은 팀장님의 tms_tbr.mk 파일을 카피해서 경로만 수정한 뒤 그대로 make all을 하여 만들었다.
본인의 것이나 팀장님의 것을 카피해서 진행하거나 매뉴얼을 참고해보길 권한다.


0.5 사용할 db생성.
1. system 환경파일 정리 및 적용
cfl -i /home/anu/o7/tmax/workspace/bank20170720/config/anbankxa.m
gst
cd $TMAXDIR/svct
cc -c -I$TMAXDIR anbankxasvr_svctab.c

2. SD or FD 컴파일 및 rc파일의 SDLFILE/FDFILE경로 변경.
sdlc -i anbankxa.s 
cc -c -I$TMAXDIR anbankxa_sdl.c 
sdlc -c -i anbankxa.s -o anbankxa.sdl
$OH/rc-7-fix3 의 SDLFILE경로 변경.


3. server program compile.
tbpc INCLUDE=$TMAXDIR INCLUDE=$TB_HOME/client/include anbankxasvr.tbc
cc -c -I$TB_HOME/client/include -I$TMAXDIR anbankxasvr.c -lsvr -ltbs
cc -o anbankxasvr anbankxasvr.o ../sdl/anbankxa_sdl.o $TMAXDIR/svct/anbankxasvr_svctab.o -I$TB_HOME/client/include -I$TMAXDIR -L$TB_HOME/client/lib -L$TMAXDIR/lib -lsvr -ltbs -ltbertl -ltbcli -ltbxa 
rm $OH/tmax/appbin/anbankxasvr
cp anbankxasvr $OH/tmax/appbin/anbankxasvr

4.client program compile.
cc -c -I$TMAXDIR anbankxacli.c
cc -O -I$TMAXDIR -L$TMAXDIR/lib -o anbankxacli anbankxacli.o -lcli -lnsl















C. 각종 에러 및 참고사항.


*** 서버 프로그램 컴파일은 db에 접근해야하는 경우 프리컴파일이 필요하다.
(프리컴파일 진행)

//tmax의 usrinc를 해당폴더에 링크잡아주면 진행가능.

tbpc insert.tbc  
cc -c -I$TMAXDIR -I$TB_HOME/client/include insert.c
cc -o insert insert.o demo_sdl.o $TMAXDIR/svct/insert_svctab.o $TMAXDIR/lib/libsvr.a $TMAXDIR/lib/libnodb.a -L$TB_HOME/client/lib -ltbertl -ltbcli -L$TMAXDIR/lib -I$TB_HOME/client/include -ldl
tmdown
cp insert $OH/tmax/appbin/insert
tmboot

*** anbankxa.m 파일로 서버측의 서비스탭을 생성했을 때, anbankxa_svctab.c 를 anbankxa_svctab.o 로 만들어줘야하는데 usrinc/atmi.h 파일을 못찾으면 cc -c anbankxa_svctab.c -I$TMAXDIR 이렇게 경로를 인클루드 시켜줘라.

*** 첫 컴파일 연습과정에서는 웬만하면 tibero에 접근하지 않는 기본예제로 진행하길 권장한다.
해당 컴파일과정은 아래링크의 이것 메뉴얼을 참고한다. 쉬운 예제 : 3.4.1 
https://technet.tmaxsoft.com/upload/download/online/tmax/pver-20151030-000001/application-development-guide/server-prg.html#d4e1057



*** 컴파일 과정도중에 마지막즈음 server측 app.o 를 실행파일로 바꿀 때 오류
 cc -o insert insert.o demo_sdl.o $TMAXDIR/svct/insert_svctab.o $TMAXDIR/lib/libsvr.a $TMAXDIR/lib/libnodb.a -L$TB_HOME/client/lib -ltbertl -ltbcli -L$TMAXDIR/lib -I$TB_HOME/client/include

/usr/bin/ld: /home/anu/o7/tmax/lib/libsvr.a(tdlmain.c.o): undefined reference to symbol 'dlclose@@GLIBC_2.2.5'
/lib/x86_64-linux-gnu/libdl.so.2: error adding symbols: DSO missing from command line
collect2: error: ld returned 1 exit status

이유:
$ man dlclose로 해당 도움말에 들어가보자.
상기의 오류메세지에서는 dlclose를 쓰고싶다고 하는데, 이런 dl관련 함수들은 동적라이브러리를 관리하는 함수를 쓰겠다고 하는 부분이다. 
그러므로 커맨드에 -ldl옵션을 추가해줘서 동적라이브러리 관련함수에 접근할 수 있게 하자.
cc 에 대해서 알고 싶으면 man cc 를 통해 들어가고, -l커맨드에 대해서 알고싶으면 man cc 에서 '/-l '을 타이핑해 -l option의 사용법을 알도록 하자.
아래는 -ldl같이 -l을 붙여 사용하는 '-l option'의 사용법이다.
-llibrary
       -l library
           Search the library named library when linking.  (The second alternative with the library as a separate
           argument is only for POSIX compliance and is not recommended.)

           It makes a difference where in the command you write this option; the linker searches and processes
           libraries and object files in the order they are specified.  Thus, foo.o -lz bar.o searches library z
           after file foo.o but before bar.o.  If bar.o refers to functions in z, those functions may not be
           loaded.

           The linker searches a standard list of directories for the library, which is actually a file named
           liblibrary.a.  The linker then uses this file as if it had been specified precisely by name.

           The directories searched include several standard system directories plus any that you specify with -L.

           Normally the files found this way are library files---archive files whose members are object files.  The
           linker handles an archive file by scanning through it for members which define symbols that have so far
           been referenced but not defined.  But if the file that is found is an ordinary object file, it is linked
           in the usual fashion.  The only difference between using an -l option and specifying a file name is that
           -l surrounds library with lib and .a and searches several directories.




해결 :
cc -o insert insert.o demo_sdl.o $TMAXDIR/svct/insert_svctab.o $TMAXDIR/lib/libsvr.a $TMAXDIR/lib/libnodb.a -L$TB_HOME/client/lib -ltbertl -ltbcli -L$TMAXDIR/lib -I$TB_HOME/client/include -ldl




  

*** 티베로 유저생성/삭제/권한부여
http://blog.naver.com/PostView.nhn?blogId=korn123&logNo=30149644326



*** 에러상황 들


*** 티베로 내의 데이터베이스에 변동이 없을 때
server 측 어플리케이션 코드마지막에 EXEC SQL COMMIT WORK RELEASE; 
만약 XA중이라면 이 COMMIT방식은 사용하지 않고, tx_commit()로 커밋하게 된다.
이 tx_commit()은 글로벌 트랜잭션(ex: function을 고르는 transaction) 같은 곳에서 함수들이 잘 수행됐다고 판단 될 때 해준다.

*** 티베로 측의 유저에 접속하지 못할 때
server 측 어플리케이션 코드 EXEC로 db의 접근하기 직전 코드에 
EXEC SQL CONNECT :tibero/tmax;
이런식으로 타이핑해 접근.
자세한건 구글링

XA에서 db에 접근 할 때는 위의 것을 대신해서 
EXEC SQL XA SET CONNECTION AT :conn_id;
여기서 :conn_id는 EXEC SQL BEFIN DECLARE SECTION 에서 설정한 값. == sample.m 에서 SVRGROUP절에서 각 svr의 아이디값.



***  (E) SVR2093 failed to loading xa routine : TIBERO libtbs.so (/home/anu/o7/tmax/lib64/libtbs.so: undefined symbol: t    bxasw) [SVR1604]
     (F) SVR2030 no xa routine is setup [SVR0027]

해결 : 팀장님이 주신 sample내의 makefile을 확인해보시길.



*** XA과정 도중에 DB에 데이터반영이 되지 않고 ulog에 아래 사항이 찍힌경우.
* 증상 :
(E) SVR2032 xa_start error : dbname(TIBERO)
XAER_PROTO (routine invoked in an improper context)
TX_FAIL (fatal error) [CSC5602]
(I) SVR0211 General Infomation : tx_connection_reset start dbname(TIBERO) [CSC5611]
(I) SVR0211 General Infomation : tx_connection_reset start dbname(TIBERO) [CSC5611]
(E) SVR2040 xa_close returned an abnormal value : XAER_INVAL (invalid arguments were given) dbname(TIBERO) [CSC5612    ]
(I) SVR0211 General Infomation : tx_connection_reset success [CSC5616]

* 원인 :
anbankxa.m 에서 RMID 를 생략하면 작동하지 않는다.
* 해결 :
아래는 그 부분에 대한 text이다.
*SVRGROUP
svg_s1       NODENAME = node1,
             DBNAME = TIBERO,
             OPENINFO="TIBERO_XA:user=tibero,pwd=tmax,db=tibero1,Loose_Coupling=false,sestm=60,conn_id=DB1",
             TMSNAME = tms_tbr,
             SVGTYPE = STMAX,
             RMID = 1
svg_s2       NODENAME = node2,
             DBNAME = TIBERO,
             OPENINFO="TIBERO_XA:user=tibero,pwd=tmax,db=tibero2,Loose_Coupling=false,sestm=60,conn_id=DB2",
             TMSNAME = tms_tbr,
             SVGTYPE = STMAX,
             RMID = 2

svgm1        NODENAME = node1,
             SVGLIST = "svg_s1, svg_s2",
             SVGTYPE = MTMAX

*SERVER
svr2301TX    SVGNAME = svgm1, MIN=5, MAX=5, MAXRSTART=-1

*SERVICE
SVC2301TX_1  SVRNAME = svr2301TX, SVCTIME=5

:






A. non-XA컴파일 총 과정 (본인의 non-XA컴파일 커맨드들은 옵션을 아무생각없이 했어서, 이대로 XA컴파일은 안될것임.)
0.사용할 db생성.
1.system 환경파일 정리
cfl -i anbankxa.m
gst    //이후 $TMAXDIR/svct/anbankxasvr_svctab.c 생성됨.
cd $TMAXDIR/svct
cc -c -I$TMAXDIR anbankxasvr_svctab.c -> anbankxasvr_svctab.o 가 생성됨.

2. SD or FD 컴파일
SD의 경우
sdlc -i demo.s   -> demo_sdl.c
cc -c -I$TMAXDIR demo_sdl.c -> demo_sdl.o
sdlc -c -i demo.s -o demo.sdl
$OH/rc-7-fix3 의 SDLFILE경로 변경.

3. server program 컴파일
EXEC사용했으면, tbpc anbankxasvr.tbc 로 프리컴파일.  
cc -c -I$TMAXDIR -I$TB_HOME/client/include anbankxasvr.c
cc -o anbankxasvr anbankxasvr.o ../sdl/anbankxa_sdl.o $TMAXDIR/svct/anbankxasvr_svctab.o $TMAXDIR/lib/libsvr.a $TMAXDIR/lib/libnodb.a -L$TB_HOME/client/lib -ltbertl -ltbcli -L$TMAXDIR/lib -I$TB_HOME/client/include -ldl -ltbs
tmdown
cp insert $OH/tmax/appbin/anbankxasvr
tmboot

4. client program compile.
cc -c -I$TMAXDIR client.c
cc -O -I$TMAXDIR -L$TMAXDIR/lib -o client client.o -lcli -lnsl



